"""
Validation Models - Database models for validation, error handling, and improvement tracking
"""
from sqlalchemy import Column, Integer, String, Text, Float, DateTime, Boolean, JSON, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime
import json

Base = declarative_base()

class ValidationLog(Base):
    """Log of validation operations"""
    __tablename__ = "validation_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    validation_id = Column(String(255), unique=True, index=True)
    llm_response = Column(Text)
    errors = Column(Text)  # JSON string of errors
    corrections = Column(Text)  # JSON string of corrections
    confidence_score = Column(Float)
    validation_success = Column(Boolean, default=False)
    processing_time_ms = Column(Integer)
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    error_logs = relationship("ErrorLog", back_populates="validation_log")

class ErrorLog(Base):
    """Log of system errors"""
    __tablename__ = "error_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    error_id = Column(String(255), unique=True, index=True)
    error_type = Column(String(100))
    severity = Column(String(50))
    message = Column(Text)
    original_request = Column(Text)  # JSON string
    user_id = Column(String(255), nullable=True)
    session_id = Column(String(255), nullable=True)
    error_metadata = Column(Text)  # JSON string
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Foreign keys
    validation_log_id = Column(Integer, ForeignKey("validation_logs.id"), nullable=True)
    
    # Relationships
    validation_log = relationship("ValidationLog", back_populates="error_logs")
    retry_attempts = relationship("RetryAttempt", back_populates="error_log")
    escalation_records = relationship("EscalationRecord", back_populates="error_log")

class RetryAttempt(Base):
    """Log of retry attempts"""
    __tablename__ = "retry_attempts"
    
    id = Column(Integer, primary_key=True, index=True)
    error_id = Column(String(255), ForeignKey("error_logs.error_id"))
    attempt_number = Column(Integer)
    strategy_used = Column(String(100))
    delay_seconds = Column(Float)
    success = Column(Boolean, default=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    error_log = relationship("ErrorLog", back_populates="retry_attempts")

class EscalationRecord(Base):
    """Log of error escalations"""
    __tablename__ = "escalation_records"
    
    id = Column(Integer, primary_key=True, index=True)
    error_id = Column(String(255), ForeignKey("error_logs.error_id"))
    escalation_reason = Column(String(255))
    escalation_level = Column(String(50))
    final_error = Column(Text)
    resolution_status = Column(String(50), default="pending")
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    error_log = relationship("ErrorLog", back_populates="escalation_records")

class PerformanceMetrics(Base):
    """Performance metrics tracking"""
    __tablename__ = "performance_metrics"
    
    id = Column(Integer, primary_key=True, index=True)
    metric_name = Column(String(255))
    metric_value = Column(Float)
    metric_type = Column(String(100))  # response_time, success_rate, etc.
    context = Column(Text)  # JSON string
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Indexing for time-series queries
    __table_args__ = (
        {'mysql_engine': 'InnoDB'}
    )

class ImprovementSuggestion(Base):
    """Improvement suggestions generated by the system"""
    __tablename__ = "improvement_suggestions"
    
    id = Column(Integer, primary_key=True, index=True)
    suggestion_id = Column(String(255), unique=True, index=True)
    type = Column(String(100))
    priority = Column(String(50))
    title = Column(String(255))
    description = Column(Text)
    suggestion_metadata = Column(Text)  # JSON string
    confidence_score = Column(Float)
    status = Column(String(50), default="pending")  # pending, approved, applied, rejected
    created_at = Column(DateTime, default=datetime.utcnow)
    applied_at = Column(DateTime, nullable=True)
    
    # Relationships
    keyword_updates = relationship("KeywordUpdate", back_populates="improvement_suggestion")

class KeywordUpdate(Base):
    """Keyword updates applied to services"""
    __tablename__ = "keyword_updates"
    
    id = Column(Integer, primary_key=True, index=True)
    service_id = Column(Integer, ForeignKey("services.id"))
    improvement_suggestion_id = Column(Integer, ForeignKey("improvement_suggestions.id"), nullable=True)
    action = Column(String(50))  # addition, removal, optimization
    keyword = Column(String(255))
    previous_keywords = Column(Text)  # JSON string
    new_keywords = Column(Text)  # JSON string
    applied_at = Column(DateTime, default=datetime.utcnow)
    update_metadata = Column(Text)  # JSON string
    
    # Relationships
    improvement_suggestion = relationship("ImprovementSuggestion", back_populates="keyword_updates")

class ValidationError(Base):
    """Specific validation errors for analysis"""
    __tablename__ = "validation_errors"
    
    id = Column(Integer, primary_key=True, index=True)
    validation_log_id = Column(Integer, ForeignKey("validation_logs.id"))
    error_type = Column(String(100))
    field_name = Column(String(255))
    original_value = Column(Text)
    expected_value = Column(Text)
    correction_applied = Column(Boolean, default=False)
    correction_confidence = Column(Float)
    timestamp = Column(DateTime, default=datetime.utcnow)

class SuggestionFeedback(Base):
    """User feedback on suggestions"""
    __tablename__ = "suggestion_feedback"
    
    id = Column(Integer, primary_key=True, index=True)
    suggestion_id = Column(String(255))
    user_id = Column(String(255))
    feedback_type = Column(String(50))  # helpful, not_helpful, applied
    rating = Column(Integer)  # 1-5 scale
    comment = Column(Text, nullable=True)
    timestamp = Column(DateTime, default=datetime.utcnow)

class SystemHealth(Base):
    """System health monitoring"""
    __tablename__ = "system_health"
    
    id = Column(Integer, primary_key=True, index=True)
    component = Column(String(100))
    status = Column(String(50))  # healthy, degraded, failed
    response_time_ms = Column(Integer)
    error_rate = Column(Float)
    throughput = Column(Float)
    health_metadata = Column(Text)  # JSON string
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Indexing for monitoring queries
    __table_args__ = (
        {'mysql_engine': 'InnoDB'}
    )

class UserInteraction(Base):
    """User interaction tracking for improvement"""
    __tablename__ = "user_interactions"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String(255))
    session_id = Column(String(255))
    interaction_type = Column(String(100))  # search, selection, feedback
    query = Column(Text)
    result = Column(Text)  # JSON string
    satisfaction_score = Column(Float, nullable=True)
    timestamp = Column(DateTime, default=datetime.utcnow)

class AlertConfiguration(Base):
    """Alert configuration for system monitoring"""
    __tablename__ = "alert_configurations"
    
    id = Column(Integer, primary_key=True, index=True)
    alert_name = Column(String(255))
    metric_name = Column(String(255))
    threshold_value = Column(Float)
    comparison_operator = Column(String(10))  # >, <, >=, <=, ==
    severity = Column(String(50))
    enabled = Column(Boolean, default=True)
    notification_channels = Column(Text)  # JSON string
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class AlertHistory(Base):
    """History of triggered alerts"""
    __tablename__ = "alert_history"
    
    id = Column(Integer, primary_key=True, index=True)
    alert_configuration_id = Column(Integer, ForeignKey("alert_configurations.id"))
    triggered_value = Column(Float)
    message = Column(Text)
    resolved = Column(Boolean, default=False)
    triggered_at = Column(DateTime, default=datetime.utcnow)
    resolved_at = Column(DateTime, nullable=True)
    
    # Relationships
    alert_configuration = relationship("AlertConfiguration")
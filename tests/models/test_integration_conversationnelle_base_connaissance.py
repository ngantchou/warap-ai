#!/usr/bin/env python3
"""
Test d'int√©gration conversationnelle avec la base de connaissances
Simule une conversation r√©elle avec int√©gration du syst√®me d'information contextuel
"""
import requests
import json

BASE_URL = "http://localhost:5000"

def test_conversational_integration():
    """Test d'int√©gration de la base de connaissances dans les conversations"""
    print("üó£Ô∏è Test d'Int√©gration Conversationnelle avec Base de Connaissances")
    print("=" * 70)
    
    # Sc√©nario 1: Question sur les tarifs avec r√©ponse contextuelle
    print("\nüìû Sc√©nario 1: Client demande des informations sur les tarifs")
    
    message_1 = "Bonjour, combien √ßa co√ªte pour r√©parer une fuite de plomberie ?"
    
    # 1. D√©tection de support
    support_response = requests.post(f"{BASE_URL}/api/v1/knowledge/support/detect", json={
        "message": message_1,
        "user_id": "237691924172",
        "context": {"service_type": "plomberie", "zone": "Bonamoussadi"}
    })
    
    if support_response.status_code == 200:
        support_data = support_response.json()
        print(f"‚úÖ Support d√©tect√©: {support_data['data']['support_level']}")
        print(f"   Niveau de confiance: {support_data['data']['confidence']:.2f}")
        
        # 2. Recherche contextuelle
        search_response = requests.get(f"{BASE_URL}/api/v1/knowledge/search", params={
            "query": "fuite plomberie tarif prix",
            "service_type": "plomberie", 
            "zone": "Bonamoussadi"
        })
        
        if search_response.status_code == 200:
            search_data = search_response.json()
            if search_data['success']:
                print(f"‚úÖ Recherche r√©ussie:")
                print(f"   ‚Ä¢ {len(search_data['data']['faqs'])} FAQs trouv√©es")
                if search_data['data']['pricing']:
                    pricing = search_data['data']['pricing']
                    print(f"   ‚Ä¢ Tarifs: {pricing['min_price']}-{pricing['max_price']} {pricing['currency']}")
                
                # G√©n√©ration de r√©ponse contextuelle
                response_contexte = f"""
üîß **Tarifs Plomberie √† Bonamoussadi**

Voici les informations tarifaires pour la plomberie :
‚Ä¢ **Tarif minimum**: {pricing['min_price'] if search_data['data']['pricing'] else 'N/A'} XAF
‚Ä¢ **Tarif maximum**: {pricing['max_price'] if search_data['data']['pricing'] else 'N/A'} XAF  
‚Ä¢ **Tarif moyen**: {pricing['average_price'] if search_data['data']['pricing'] else 'N/A'} XAF

üí° **Facteurs influen√ßant le prix**:
‚Ä¢ Urgence: +20% pour les interventions urgentes
‚Ä¢ Complexit√©: Variable selon le type de r√©paration
‚Ä¢ Mat√©riaux: Co√ªt des pi√®ces en sus

üìû Pour obtenir un devis personnalis√©, d√©crivez-moi votre probl√®me pr√©cis√©ment !
                """
                print(f"‚úÖ R√©ponse g√©n√©r√©e: {response_contexte[:100]}...")
    
    # Sc√©nario 2: Question technique avec r√©solution guid√©e
    print("\nüîß Sc√©nario 2: Client avec probl√®me technique sp√©cifique")
    
    message_2 = "J'ai une fuite sous mon √©vier, que dois-je faire en urgence ?"
    
    # 1. R√©solution guid√©e
    resolution_response = requests.get(f"{BASE_URL}/api/v1/knowledge/support/guided-resolution/fuite", params={
        "service_type": "plomberie",
        "zone": "Bonamoussadi"
    })
    
    if resolution_response.status_code == 200:
        resolution_data = resolution_response.json()
        if resolution_data['success']:
            resolution = resolution_data['data']
            print(f"‚úÖ R√©solution guid√©e disponible:")
            print(f"   ‚Ä¢ {len(resolution['troubleshooting_steps'])} √©tapes de d√©pannage")
            print(f"   ‚Ä¢ {len(resolution['related_faqs'])} FAQs connexes")
            
            if resolution['troubleshooting_steps']:
                print("   üìã Premi√®res √©tapes:")
                for step in resolution['troubleshooting_steps'][:2]:
                    print(f"      {step['step']}. {step['title']}: {step['description']}")
    
    # Sc√©nario 3: Escalade vers agent humain
    print("\nüë§ Sc√©nario 3: Escalade vers support humain")
    
    message_3 = "C'est urgent, j'ai besoin de parler √† quelqu'un imm√©diatement !"
    
    # 1. D√©tection d'urgence
    urgent_support = requests.post(f"{BASE_URL}/api/v1/knowledge/support/detect", json={
        "message": message_3,
        "user_id": "237691924172",
        "context": {"service_type": "plomberie", "zone": "Bonamoussadi"}
    })
    
    if urgent_support.status_code == 200:
        urgent_data = urgent_support.json()
        print(f"‚úÖ Escalade d√©tect√©e: {urgent_data['data']['escalation_suggested']}")
        
        if urgent_data['data']['escalation_suggested']:
            # 2. D√©marrage session support
            session_response = requests.post(f"{BASE_URL}/api/v1/knowledge/support/session", json={
                "user_id": "237691924172",
                "session_type": "human"
            })
            
            if session_response.status_code == 200:
                session_data = session_response.json()
                if session_data['success']:
                    session_id = session_data['data']['session_id']
                    print(f"‚úÖ Session support cr√©√©e: {session_id}")
                    
                    # 3. Escalade vers humain
                    escalation_response = requests.post(f"{BASE_URL}/api/v1/knowledge/support/escalate", json={
                        "session_id": session_id,
                        "user_id": "237691924172",
                        "reason": "Demande urgente de support",
                        "priority": "urgent"
                    })
                    
                    if escalation_response.status_code == 200:
                        escalation_data = escalation_response.json()
                        if escalation_data['success']:
                            print(f"‚úÖ Escalade r√©ussie: {escalation_data['escalation_id']}")
                            print(f"   Temps d'attente: {escalation_data['estimated_wait_time']} min")
    
    # Sc√©nario 4: Suivi analytics et am√©lioration
    print("\nüìä Sc√©nario 4: Analytics et am√©lioration continue")
    
    # 1. Enregistrement des questions pour am√©lioration
    questions_to_record = [
        "Comment nettoyer un siphon bouch√© ?",
        "Pourquoi mon robinet goutte ?",
        "Comment changer un joint de robinet ?"
    ]
    
    recorded_questions = 0
    for question in questions_to_record:
        record_response = requests.post(f"{BASE_URL}/api/v1/knowledge/question", json={
            "user_id": "237691924172",
            "question": question,
            "service_type": "plomberie",
            "zone": "Bonamoussadi"
        })
        if record_response.status_code == 200:
            recorded_questions += 1
    
    print(f"‚úÖ {recorded_questions} questions enregistr√©es pour am√©lioration")
    
    # 2. Analytics de performance
    analytics_response = requests.get(f"{BASE_URL}/api/v1/knowledge/analytics/support")
    if analytics_response.status_code == 200:
        analytics_data = analytics_response.json()
        if analytics_data['success']:
            analytics = analytics_data['data']
            print(f"‚úÖ Analytics r√©cup√©r√©es:")
            print(f"   ‚Ä¢ Sessions totales: {analytics['total_sessions']}")
            print(f"   ‚Ä¢ Taux de r√©solution: {analytics['resolution_rate']:.1f}%")
    
    # 3. Analyse pour am√©lioration
    analysis_response = requests.post(f"{BASE_URL}/api/v1/knowledge/maintenance/analyze-questions", json={
        "days": 1
    })
    if analysis_response.status_code == 200:
        analysis_data = analysis_response.json()
        if analysis_data['success']:
            print(f"‚úÖ Analyse d'am√©lioration:")
            print(f"   ‚Ä¢ Questions non r√©solues: {analysis_data['total_unanswered']}")
            print(f"   ‚Ä¢ Suggestions de contenu: {len(analysis_data['content_suggestions'])}")
    
    print("\n" + "=" * 70)
    print("üéØ TEST D'INT√âGRATION CONVERSATIONNELLE R√âUSSI !")
    
    print("\n‚úÖ FONCTIONNALIT√âS TEST√âES:")
    print("   üîç Recherche contextuelle intelligente")
    print("   üí∞ Informations tarifaires automatiques")  
    print("   üÜò D√©tection et escalade de support")
    print("   üìã R√©solution guid√©e des probl√®mes")
    print("   üë§ Support humain avec priorit√©s")
    print("   üìä Analytics et am√©lioration continue")
    print("   ü§ñ R√©ponses contextuelles adapt√©es")
    
    print("\nüèÜ SYST√àME D'INFORMATION CONTEXTUEL")
    print("   ‚úì Int√©gration transparente dans les conversations")
    print("   ‚úì Escalade intelligente FAQ ‚Üí Bot ‚Üí Humain")
    print("   ‚úì Informations tarifaires contextuelles")
    print("   ‚úì Support proactif et r√©solution guid√©e")
    print("   ‚úì Am√©lioration continue bas√©e sur l'usage")
    
    print("\nüöÄ PR√äT POUR INT√âGRATION DANS LE GESTIONNAIRE DE CONVERSATION")

if __name__ == "__main__":
    test_conversational_integration()
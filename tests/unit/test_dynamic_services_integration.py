#!/usr/bin/env python3
"""
Test d'int√©gration des services dynamiques avec le LLM Conversation Manager
V√©rifie que les services et zones sont correctement r√©cup√©r√©s de la base de donn√©es
"""

import asyncio
import json
from typing import Dict, Any
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import os
import sys
from datetime import datetime

# Ajouter le chemin de l'app au PYTHONPATH
sys.path.insert(0, '/tmp/workspace/app')
sys.path.insert(0, '/tmp/workspace')

from app.services.llm_conversation_manager import LLMConversationManager
from app.models.database_models import Base
from app.models.dynamic_services import Service, Zone, ServiceCategory

class DynamicServicesTest:
    """Test d'int√©gration des services dynamiques"""
    
    def __init__(self):
        """Initialisation du test"""
        self.engine = create_engine(os.environ.get('DATABASE_URL'))
        self.SessionLocal = sessionmaker(bind=self.engine)
        
    def test_dynamic_services_retrieval(self):
        """Test de r√©cup√©ration des services dynamiques"""
        print("=== Test de r√©cup√©ration des services dynamiques ===")
        
        db = self.SessionLocal()
        try:
            # Cr√©er le manager de conversation
            manager = LLMConversationManager(db)
            
            # Test asynchrone
            async def test_async():
                # R√©cup√©rer les services dynamiques
                services = await manager._get_dynamic_services()
                print(f"Services trouv√©s: {len(services)}")
                
                for service in services:
                    print(f"  - {service['name']}: {service['description']}")
                    if service['min_price'] and service['max_price']:
                        print(f"    Prix: {service['min_price']} - {service['max_price']} XAF")
                
                # R√©cup√©rer les zones dynamiques
                zones = await manager._get_dynamic_zones()
                print(f"\nZones trouv√©es: {len(zones)}")
                
                for zone in zones:
                    print(f"  - {zone['name']} ({zone['type']})")
                
                return services, zones
            
            # Ex√©cuter le test asynchrone
            services, zones = asyncio.run(test_async())
            
            # V√©rifications
            assert len(services) > 0, "Aucun service trouv√©"
            assert len(zones) > 0, "Aucune zone trouv√©e"
            
            print("\n‚úì Test de r√©cup√©ration r√©ussi")
            return True
            
        except Exception as e:
            print(f"‚úó Erreur dans le test: {e}")
            return False
        finally:
            db.close()
    
    def test_faq_response_with_dynamic_data(self):
        """Test de g√©n√©ration de r√©ponse FAQ avec donn√©es dynamiques"""
        print("\n=== Test de g√©n√©ration FAQ avec donn√©es dynamiques ===")
        
        db = self.SessionLocal()
        try:
            manager = LLMConversationManager(db)
            
            async def test_async():
                # Simuler une demande FAQ
                response = await manager.process_message(
                    user_identifier="test_user_dynamic",
                    message="services disponibles",
                    session_id="test_session"
                )
                
                print(f"R√©ponse g√©n√©r√©e: {response['response'][:200]}...")
                
                # V√©rifier que la r√©ponse contient des informations dynamiques
                response_text = response['response']
                
                # V√©rifier la pr√©sence d'informations de services
                assert "plomberie" in response_text.lower() or "Plomberie" in response_text
                assert "√©lectricit√©" in response_text.lower() or "√âlectricit√©" in response_text
                assert "√©lectrom√©nager" in response_text.lower() or "√âlectrom√©nager" in response_text
                
                # V√©rifier la pr√©sence d'informations de zones
                assert "bonamoussadi" in response_text.lower() or "Bonamoussadi" in response_text
                
                return response
            
            response = asyncio.run(test_async())
            
            print("‚úì Test de g√©n√©ration FAQ r√©ussi")
            return True
            
        except Exception as e:
            print(f"‚úó Erreur dans le test FAQ: {e}")
            return False
        finally:
            db.close()
    
    def test_database_content(self):
        """Test du contenu de la base de donn√©es"""
        print("\n=== Test du contenu de la base de donn√©es ===")
        
        db = self.SessionLocal()
        try:
            # Compter les services
            service_count = db.query(Service).count()
            print(f"Nombre de services en base: {service_count}")
            
            # Compter les zones
            zone_count = db.query(Zone).count()
            print(f"Nombre de zones en base: {zone_count}")
            
            # Lister les services disponibles
            available_services = db.query(Service).filter(Service.status == "available").all()
            print(f"Services disponibles: {len(available_services)}")
            
            for service in available_services[:5]:  # Limiter l'affichage
                print(f"  - {service.name_fr or service.name}")
            
            # Lister les zones actives
            active_zones = db.query(Zone).filter(Zone.is_active == True).all()
            print(f"Zones actives: {len(active_zones)}")
            
            for zone in active_zones[:5]:  # Limiter l'affichage
                print(f"  - {zone.name_fr or zone.name}")
            
            print("‚úì Test du contenu de la base r√©ussi")
            return True
            
        except Exception as e:
            print(f"‚úó Erreur dans le test de base: {e}")
            return False
        finally:
            db.close()
    
    def run_all_tests(self):
        """Ex√©cuter tous les tests"""
        print("üîß Test d'int√©gration des services dynamiques - Djobea AI")
        print("=" * 60)
        
        tests = [
            ("Test de contenu de la base de donn√©es", self.test_database_content),
            ("Test de r√©cup√©ration des services", self.test_dynamic_services_retrieval),
            ("Test de g√©n√©ration FAQ", self.test_faq_response_with_dynamic_data)
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"\nüîç {test_name}...")
            result = test_func()
            results.append((test_name, result))
        
        # R√©sum√© des r√©sultats
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 60)
        
        passed = 0
        for test_name, result in results:
            status = "‚úì R√âUSSI" if result else "‚úó √âCHOU√â"
            print(f"{status} - {test_name}")
            if result:
                passed += 1
        
        print(f"\nR√©sultat global: {passed}/{len(tests)} tests r√©ussis")
        
        if passed == len(tests):
            print("üéâ Tous les tests sont pass√©s avec succ√®s !")
            print("‚úì Les services dynamiques sont correctement int√©gr√©s")
        else:
            print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        
        return passed == len(tests)

def main():
    """Fonction principale"""
    test = DynamicServicesTest()
    success = test.run_all_tests()
    
    if success:
        print("\nüöÄ Int√©gration des services dynamiques termin√©e avec succ√®s")
    else:
        print("\n‚ùå Probl√®mes d√©tect√©s dans l'int√©gration")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())
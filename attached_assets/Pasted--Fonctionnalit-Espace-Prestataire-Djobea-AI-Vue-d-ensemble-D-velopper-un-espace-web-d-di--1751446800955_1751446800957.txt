# Fonctionnalité Espace Prestataire - Djobea AI

## Vue d'ensemble
Développer un espace web dédié aux prestataires de Djobea AI, leur permettant de gérer efficacement leurs demandes, suivre leurs performances et optimiser leur activité via un dashboard complet.

## Objectifs principaux
- **Autonomie** : Permettre aux prestataires de gérer leurs demandes sans intervention manuelle
- **Transparence** : Visibilité complète sur les demandes, revenus et statistiques
- **Efficacité** : Interface simple et rapide, adaptée aux artisans locaux
- **Mobilité** : Interface responsive pour utilisation sur smartphone
- **Fidélisation** : Outils pour améliorer la performance et augmenter les revenus

## Architecture technique

### Stack technique (conforme au projet principal)
- **Backend** : FastAPI (Python 3.9+)
- **Base de données** : PostgreSQL (tables existantes + nouvelles)
- **Frontend** : Templates Jinja2 + Bootstrap 5 + JavaScript vanilla
- **Authentification** : JWT avec session management
- **Notifications** : WhatsApp Business API (Twilio/MessageBird)

### Nouvelles tables à créer
```sql
-- Sessions prestataires
CREATE TABLE provider_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    provider_id UUID REFERENCES providers(id),
    session_token VARCHAR(255) UNIQUE,
    expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Paramètres prestataire
CREATE TABLE provider_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    provider_id UUID REFERENCES providers(id) UNIQUE,
    notifications_enabled BOOLEAN DEFAULT true,
    auto_accept_familiar_clients BOOLEAN DEFAULT false,
    working_hours JSONB, -- {"start": "08:00", "end": "18:00", "days": [1,2,3,4,5]}
    notification_sound BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Statistiques calculées prestataire
CREATE TABLE provider_stats_cache (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    provider_id UUID REFERENCES providers(id) UNIQUE,
    period_start DATE,
    period_end DATE,
    total_requests INTEGER DEFAULT 0,
    completed_requests INTEGER DEFAULT 0,
    cancelled_requests INTEGER DEFAULT 0,
    total_earnings DECIMAL(10,2) DEFAULT 0,
    average_rating DECIMAL(3,2) DEFAULT 0,
    response_time_avg INTEGER DEFAULT 0, -- en minutes
    calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Fonctionnalités détaillées

### 1. Système d'authentification sécurisé

#### Connexion via WhatsApp (Recommandé)
- Envoi code OTP via WhatsApp au numéro enregistré
- Validation du code et génération JWT
- Session automatique de 30 jours avec renouvellement

#### Connexion alternative (Email/Mot de passe)
- Pour prestataires avec email configuré
- Récupération mot de passe par WhatsApp/SMS
- Authentification double facteur optionnelle

### 2. Dashboard principal - Vue d'ensemble

#### Métriques clés (cartes KPI)
- **Demandes du jour** : Nouvelles, en cours, terminées
- **Revenus de la semaine** : Montant brut et net (après commission)
- **Taux d'acceptation** : Pourcentage sur 7 derniers jours
- **Note moyenne** : Rating client avec évolution
- **Temps de réponse moyen** : Performance dernière semaine

#### Graphiques de performance
- **Évolution des revenus** : Graphique linéaire 30 derniers jours
- **Répartition des services** : Camembert des types de demandes
- **Activité hebdomadaire** : Heatmap des créneaux les plus demandés
- **Satisfaction client** : Évolution des notes sur 3 mois

#### Alertes et notifications
- Badge de nouvelles demandes non vues
- Alertes de demandes urgentes
- Rappels de demandes en attente de réponse (> 30min)
- Notifications de paiements reçus

### 3. Gestion des demandes - Module central

#### Vue liste des demandes avec filtres
- **Statuts** : Nouvelles, Acceptées, En cours, Terminées, Annulées
- **Urgence** : Urgent, Aujourd'hui, Cette semaine, Planifié
- **Services** : Plomberie, Électricité, Réparation électroménager
- **Zone** : Quartiers de Bonamoussadi
- **Date** : Plage de dates personnalisable

#### Carte détaillée de demande
```
┌─────────────────────────────────────────┐
│ [URGENT] Réparation fuite cuisine       │
│ ⏰ Demandé il y a 15 min                │
├─────────────────────────────────────────┤
│ 👤 Jean Kouam - ⭐ 4.8/5 (12 avis)     │
│ 📍 Bonamoussadi, Rue du Marché         │
│ 📱 +237 6XX XXX XXX                    │
├─────────────────────────────────────────┤
│ 📝 Description:                         │
│ "Fuite sous l'évier de cuisine,        │
│  eau qui coule en permanence..."       │
├─────────────────────────────────────────┤
│ 💰 Budget indicatif: 15,000 - 25,000 F │
│ ⌚ Délai souhaité: Dès que possible     │
├─────────────────────────────────────────┤
│ [ACCEPTER] [DÉCLINER] [APPELER CLIENT]  │
└─────────────────────────────────────────┘
```

#### Actions rapides sur demandes
- **Accepter** : Confirmation + notification client automatique
- **Décliner** : Avec raison optionnelle (agenda plein, hors zone, etc.)
- **Appeler client** : Lancement appel direct ou WhatsApp
- **Demander précisions** : Template de questions rapides
- **Reporter** : Proposer nouveau créneau

#### Suivi de mission en cours
- Étapes de progression : Arrivé, Diagnostic, Réparation, Terminé
- Photos avant/après (pour validation et portfolio)
- Temps passé (chronomètre intégré)
- Matériaux utilisés et coûts
- Demande de paiement avec montant détaillé

### 4. Module de communication client

#### Messagerie intégrée
- Historique des échanges WhatsApp
- Templates de réponses rapides :
  - "J'arrive dans 15 minutes"
  - "Diagnostic en cours, je vous explique"
  - "Réparation terminée, tout fonctionne"
  - "Facture envoyée, merci pour votre confiance"

#### Système d'appels
- Bouton appel direct depuis l'app
- Historique des appels avec durée
- Notes post-appel intégrées au dossier client

### 5. Gestion financière et facturation

#### Suivi des revenus
- **Revenus du mois** : Détail par service et par client
- **Commissions Djobea** : Transparence totale sur les prélèvements
- **Paiements en attente** : Missions terminées non payées
- **Historique des paiements** : Export possible en PDF/Excel

#### Facturation simplifiée
- **Devis rapide** : Templates pré-remplis par service
- **Facture automatique** : Génération post-mission
- **Suivi des paiements** : Statuts Envoyé/Payé/En retard
- **Relances automatiques** : Système de rappels clients

#### Prévisions et objectifs
- **Objectifs mensuels** : Définition et suivi
- **Prévisions de revenus** : Basé sur l'historique
- **Recommandations** : Conseils IA pour augmenter l'activité

### 6. Profil et paramètres prestataire

#### Informations personnelles
- Photo de profil et présentation
- Spécialités et certifications
- Zone d'intervention (quartiers)
- Horaires de disponibilité
- Tarifs indicatifs par service

#### Paramètres de notification
- Notifications push activées/désactivées
- Son d'alerte pour nouvelles demandes
- Fréquence des résumés d'activité
- Types de demandes à recevoir

#### Gestion des absences
- Calendrier des indisponibilités
- Mode "Absent" temporaire
- Redirection automatique des demandes
- Notifications d'absence aux clients

### 7. Analytics et rapports prestataire

#### Rapports de performance
- **Rapport hebdomadaire** : Activité, revenus, satisfaction
- **Analyse mensuelle** : Tendances et recommandations
- **Comparaison sectorielle** : Positionnement vs autres prestataires
- **Rapport annuel** : Bilan complet pour déclarations

#### Métriques détaillées
- Taux de conversion (demandes vues → acceptées)
- Temps de réponse moyen et impact sur les acceptations
- Zones les plus rentables et créneaux optimaux
- Évolution de la satisfaction client dans le temps

## Interface utilisateur - Spécifications UX

### Design System adapté au contexte camerounais

#### Palette de couleurs
- **Primaire** : Bleu Djobea (#1e4d72) - Confiance et professionnalisme
- **Secondaire** : Orange (#ff8c00) - Énergie et optimisme
- **Succès** : Vert (#28a745) - Validation et réussite
- **Urgence** : Rouge (#dc3545) - Demandes prioritaires
- **Neutre** : Gris (#6c757d) - Informations secondaires

#### Typographie et iconographie
- **Police principale** : Roboto (lisible sur tous écrans)
- **Icônes** : Font Awesome Pro + icônes locales personnalisées
- **Taille minimale** : 16px (lisibilité sur smartphone)
- **Contraste** : AAA pour accessibilité

### Adaptation mobile-first

#### Breakpoints responsive
- **Mobile** : 320px - 768px (priorité absolue)
- **Tablette** : 769px - 1024px
- **Desktop** : 1025px+ (confort supplémentaire)

#### Navigation mobile optimisée
- Bottom navigation bar (Accueil, Demandes, Finances, Profil)
- Swipe gestures pour navigation rapide
- Pull-to-refresh pour actualisation
- Boutons d'action flottants pour actions prioritaires

### Performance et accessibilité

#### Optimisations techniques
- **Temps de chargement** : < 3 secondes sur 3G
- **Taille des images** : WebP avec fallback
- **Cache intelligent** : Service Worker pour offline basique
- **Lazy loading** : Images et contenus non critiques

#### Accessibilité locale
- **Langues** : Interface français avec support des expressions locales
- **Aide contextuelle** : Tooltips et guides intégrés
- **Navigation clavier** : Support complet
- **Mode sombre** : Pour usage en extérieur

## Fonctionnalités avancées (Phase 2)

### Intelligence artificielle intégrée

#### Assistant IA prestataire
- **Conseils personnalisés** : "Accepter cette demande basé sur votre profil"
- **Optimisation planning** : "Créneau optimal pour maximiser vos revenus"
- **Prédictions** : "Forte demande prévue ce weekend en plomberie"
- **Formation** : Suggestions d'amélioration basées sur les performances

#### Chatbot support
- Support technique 24/7 pour problèmes app
- FAQ intelligente avec apprentissage
- Escalade vers support humain si nécessaire

### Gamification et fidélisation

#### Système de badges et niveaux
- **Badges de performance** : "Réponse éclair", "Client satisfait", "Pro du mois"
- **Niveaux de prestataire** : Bronze, Argent, Or, Platine
- **Avantages par niveau** : Commission réduite, priorité sur demandes premium
- **Défis mensuels** : Objectifs ludiques avec récompenses

#### Programme de parrainage
- Bonus pour chaque nouveau prestataire parrainé
- Commission réduite pour parrains actifs
- Système de points échangeables contre avantages

### Outils de développement business

#### Formation intégrée
- **Tutoriels vidéo** : Techniques de réparation avancées
- **Webinaires** : Gestion client et tarification
- **Certification Djobea** : Gage de qualité pour clients
- **Réseau professionnel** : Échange entre prestataires

#### Outils de croissance
- **Agenda intelligent** : Optimisation automatique des créneaux
- **Analyse concurrentielle** : Positionnement tarifaire recommandé
- **Marketing personnel** : Outils pour développer sa clientèle
- **Gestion d'équipe** : Pour prestataires avec employés

## Spécifications techniques d'implémentation

### Architecture backend (FastAPI)

#### Structure des endpoints
```python
# Authentification
POST /provider/auth/send-otp
POST /provider/auth/verify-otp
POST /provider/auth/refresh-token
DELETE /provider/auth/logout

# Dashboard
GET /provider/dashboard/stats
GET /provider/dashboard/chart-data/{period}
GET /provider/dashboard/notifications

# Demandes
GET /provider/requests
GET /provider/requests/{request_id}
PUT /provider/requests/{request_id}/accept
PUT /provider/requests/{request_id}/decline
PUT /provider/requests/{request_id}/update-status
POST /provider/requests/{request_id}/message

# Profil et paramètres
GET /provider/profile
PUT /provider/profile
GET /provider/settings
PUT /provider/settings
POST /provider/availability

# Finances
GET /provider/finance/earnings/{period}
GET /provider/finance/invoices
POST /provider/finance/invoice
GET /provider/finance/export/{format}
```

#### Middleware de sécurité
```python
from fastapi import HTTPException, Depends
from fastapi.security import HTTPBearer

async def verify_provider_token(token: str = Depends(HTTPBearer())):
    """Vérifie et valide le token JWT prestataire"""
    try:
        payload = jwt.decode(token.credentials, SECRET_KEY, algorithms=["HS256"])
        provider_id = payload.get("provider_id")
        if not provider_id:
            raise HTTPException(status_code=401)
        
        # Vérifier si session active
        session = await db.fetch_one(
            "SELECT * FROM provider_sessions WHERE provider_id = $1 AND expires_at > NOW()",
            provider_id
        )
        if not session:
            raise HTTPException(status_code=401, detail="Session expirée")
            
        return provider_id
    except Exception:
        raise HTTPException(status_code=401, detail="Token invalide")
```

#### Cache et performance
```python
import redis
from fastapi_cache import FastAPICache
from fastapi_cache.backends.redis import RedisBackend

# Configuration cache Redis
FastAPICache.init(RedisBackend(redis_client), prefix="djobea-provider")

@cache(expire=300)  # 5 minutes
async def get_provider_stats(provider_id: str):
    """Cache des statistiques prestataire"""
    # Requêtes lourdes en cache
    pass

@cache(expire=60)  # 1 minute
async def get_provider_active_requests(provider_id: str):
    """Cache des demandes actives"""
    pass
```

### Base de données - Optimisations

#### Index de performance
```sql
-- Index pour requêtes fréquentes prestataires
CREATE INDEX idx_requests_provider_status ON service_requests(assigned_provider_id, status) WHERE assigned_provider_id IS NOT NULL;
CREATE INDEX idx_requests_created_desc ON service_requests(created_at DESC);
CREATE INDEX idx_provider_sessions_active ON provider_sessions(provider_id, expires_at) WHERE expires_at > CURRENT_TIMESTAMP;
CREATE INDEX idx_provider_stats_period ON provider_stats_cache(provider_id, period_start, period_end);

-- Index géospatial pour zones
CREATE INDEX idx_requests_location ON service_requests USING GIST(location_coordinates);
```

#### Vues matérialisées pour analytics
```sql
-- Vue des performances prestataires (actualisation quotidienne)
CREATE MATERIALIZED VIEW provider_performance_daily AS
SELECT 
    p.id as provider_id,
    DATE(sr.created_at) as date,
    COUNT(*) as total_requests,
    COUNT(*) FILTER (WHERE sr.status = 'terminée') as completed_requests,
    AVG(sr.client_rating) as avg_rating,
    SUM(sr.final_amount) FILTER (WHERE sr.status = 'terminée') as daily_earnings
FROM providers p
LEFT JOIN service_requests sr ON p.id = sr.assigned_provider_id
WHERE sr.created_at >= CURRENT_DATE - INTERVAL '90 days'
GROUP BY p.id, DATE(sr.created_at);

-- Actualisation automatique
CREATE OR REPLACE FUNCTION refresh_provider_performance()
RETURNS void AS $$
BEGIN
    REFRESH MATERIALIZED VIEW CONCURRENTLY provider_performance_daily;
END;
$$ LANGUAGE plpgsql;

-- Cron job pour actualisation quotidienne à 2h du matin
SELECT cron.schedule('refresh-provider-stats', '0 2 * * *', 'SELECT refresh_provider_performance();');
```

### Frontend - Architecture JavaScript

#### Structure modulaire
```javascript
// assets/js/provider/
├── modules/
│   ├── auth.js           // Gestion authentification
│   ├── dashboard.js      // Métriques et graphiques
│   ├── requests.js       // Gestion des demandes
│   ├── messaging.js      // Communication client
│   ├── finances.js       // Suivi revenus
│   └── notifications.js  // Système de notifications
├── components/
│   ├── modal.js         // Composants modales réutilisables
│   ├── charts.js        // Graphiques Chart.js
│   ├── forms.js         // Validation et soumission
│   └── utils.js         // Utilitaires généraux
└── app.js               // Point d'entrée principal
```

#### Système de notifications temps réel
```javascript
class ProviderNotifications {
    constructor(providerId) {
        this.providerId = providerId;
        this.eventSource = null;
        this.notificationQueue = [];
        this.init();
    }

    init() {
        // Connexion Server-Sent Events
        this.eventSource = new EventSource(`/provider/notifications/stream?provider_id=${this.providerId}`);
        
        this.eventSource.onmessage = (event) => {
            const data = JSON.parse(event.data);
            this.handleNotification(data);
        };

        // Fallback polling si SSE non supporté
        this.eventSource.onerror = () => {
            console.log('SSE failed, fallback to polling');
            this.startPolling();
        };
    }

    handleNotification(notification) {
        switch(notification.type) {
            case 'new_request':
                this.showNewRequestAlert(notification.data);
                this.playNotificationSound();
                break;
            case 'urgent_request':
                this.showUrgentAlert(notification.data);
                this.playUrgentSound();
                break;
            case 'payment_received':
                this.showSuccessToast('Paiement reçu!');
                break;
        }
        
        this.updateBadges();
    }

    playNotificationSound() {
        // Son discret pour nouvelles demandes
        const audio = new Audio('/static/sounds/notification-soft.mp3');
        audio.volume = 0.3;
        audio.play().catch(() => {});
    }

    playUrgentSound() {
        // Son plus marqué pour urgences
        const audio = new Audio('/static/sounds/urgent-alert.mp3');
        audio.volume = 0.6;
        audio.play().catch(() => {});
    }
}
```

#### Progressive Web App (PWA)
```javascript
// Service Worker pour fonctionnalités offline
self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open('djobea-provider-v1').then((cache) => {
            return cache.addAll([
                '/provider/dashboard',
                '/provider/requests',
                '/static/css/provider.css',
                '/static/js/provider/app.js',
                '/static/images/icons/',
                '/static/sounds/'
            ]);
        })
    );
});

// Gestion des notifications push
self.addEventListener('push', (event) => {
    const options = {
        body: event.data.text(),
        icon: '/static/images/djobea-icon-192.png',
        badge: '/static/images/djobea-badge-72.png',
        vibrate: [200, 100, 200],
        actions: [
            {
                action: 'view',
                title: 'Voir la demande',
                icon: '/static/images/icons/view.png'
            },
            {
                action: 'dismiss',
                title: 'Ignorer',
                icon: '/static/images/icons/dismiss.png'
            }
        ]
    };

    event.waitUntil(
        self.registration.showNotification('Nouvelle demande Djobea', options)
    );
});
```

## Déploiement et monitoring

### Configuration production

#### Variables d'environnement
```bash
# Provider App Configuration
PROVIDER_JWT_SECRET=your-super-secret-key
PROVIDER_SESSION_DURATION=2592000  # 30 jours
PROVIDER_OTP_EXPIRY=300  # 5 minutes

# Notifications
WHATSAPP_PROVIDER_WEBHOOK=https://api.djobea.cm/provider/webhooks/whatsapp
PUSH_NOTIFICATION_VAPID_KEY=your-vapid-key

# Performance
REDIS_URL=redis://localhost:6379/2
PROVIDER_CACHE_TTL=300

# Security
RATE_LIMIT_PROVIDER=100/minute
ALLOWED_ORIGINS=https://app.djobea.cm,https://provider.djobea.cm
```

#### Docker configuration
```dockerfile
# Dockerfile.provider
FROM python:3.9-slim

WORKDIR /app

# Dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Application
COPY . .

# Provider-specific setup
RUN mkdir -p /app/static/provider/uploads
RUN mkdir -p /app/logs/provider

EXPOSE 8080

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "4"]
```

#### Monitoring et alertes
```python
# Métriques spécifiques prestataires
from prometheus_client import Counter, Histogram, Gauge

# Compteurs business
provider_logins = Counter('provider_logins_total', 'Connexions prestataires')
request_acceptances = Counter('request_acceptances_total', 'Demandes acceptées')
provider_earnings = Counter('provider_earnings_total', 'Revenus générés')

# Métriques performance
response_time = Histogram('provider_request_duration_seconds', 'Temps de réponse')
active_providers = Gauge('active_providers_count', 'Prestataires actifs')

# Alertes critiques (via Slack/email)
- Aucun prestataire connecté depuis 1h
- Taux d'acceptation < 30% sur 24h
- Erreurs authentication > 10% sur 1h
- Temps de réponse moyen > 5s sur 15min
```

## Critères de succès et KPIs

### Métriques de réussite technique
- **Disponibilité** : 99.5% (max 3.6h downtime/mois)
- **Performance** : < 2s temps de chargement mobile
- **Adoption** : 80% des prestataires actifs utilisent l'app
- **Engagement** : Session moyenne > 10 minutes
- **Retention** : 85% de connexions hebdomadaires

### Métriques business prestataires
- **Taux d'acceptation** : > 60% des demandes reçues
- **Temps de réponse** : < 15 minutes moyenne
- **Satisfaction prestataire** : Score app > 4.2/5
- **Revenus moyens** : Augmentation 25% vs période sans app
- **Efficacité** : -30% temps admin grâce à l'automatisation

### ROI et impact économique
- **Économies opérationnelles** : -50% appels support
- **Augmentation commissions** : +15% via meilleur matching
- **Fidélisation prestataires** : Taux de churn < 10%/mois
- **Qualité service** : Note moyenne clients > 4.5/5

## Planning de développement

### Phase 1 (4 semaines) - Core Features
**Semaine 1-2 : Infrastructure et authentification**
- Setup backend FastAPI avec nouvelles tables
- Système d'authentification OTP WhatsApp
- Interface de base responsive

**Semaine 3-4 : Gestion demandes basique**
- Module d'affichage et filtrage des demandes
- Actions accepter/décliner avec notifications
- Dashboard basique avec métriques essentielles

### Phase 2 (3 semaines) - Features avancées
**Semaine 5-6 : Communication et suivi**
- Messagerie intégrée WhatsApp
- Suivi des missions en cours
- Système de notifications temps réel

**Semaine 7 : Analytics et finances**
- Tableaux de bord détaillés
- Module de suivi financier
- Rapports exportables

### Phase 3 (2 semaines) - Optimisation et déploiement
**Semaine 8 : Performance et tests**
- Optimisations performance mobile
- Tests utilisateurs avec prestataires pilotes
- PWA et fonctionnalités offline

**Semaine 9 : Déploiement et formation**
- Mise en production avec monitoring
- Formation prestataires existants
- Documentation utilisateur

## Conclusion et recommandations

### Points d'attention critiques
1. **Simplicité d'usage** : Interface intuitive pour prestataires peu tech-savvy
2. **Performance mobile** : Optimisation absolue pour smartphones d'entrée de gamme
3. **Fiabilité notifications** : System critique pour réactivité prestataires
4. **Accompagnement changement** : Formation et support pour adoption
5. **Évolutivité** : Architecture préparée pour croissance rapide

### Facteurs de succès
- **Valeur immédiate** : Bénéfices visibles dès les premières utilisations
- **Feedback loop** : Amélioration continue basée sur usage réel
- **Communication transparente** : Prestataires impliqués dans le développement
- **Support humain** : Équipe dédiée pour accompagner la transition
- **Incentives adoptions** : Avantages temporaires pour early adopters

Cet espace prestataire est conçu pour transformer Djobea AI d'un service de matching manuel vers une plateforme automatisée où les prestataires sont autonomes et efficaces, tout en maintenant la qualité de service qui fait la réputation de Djobea.